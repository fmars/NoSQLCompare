#if defined(_WIN32)
#include <winsock2.h>
#include <windows.h>
#endif

#include "mongo/client/dbclient.h"

#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include "insert.h"

using namespace std;
using namespace mongo;

void query_test_1(){
	ifstream file("parsedData");
	string str;
	if(!file.is_open()){
		cout<<"Open File Failed\n";
		return;
	}
	getline(file,str);
	while(getline(file,str)){
    	mongo::BSONObjBuilder obj;
		if(str!="NEW RECORD"){
			cout<<"parse error\n";
			return;
		}
		getline(file,str);//MID
		getline(file,str);
		while(str!="END RECORD"){
			string field_name=str;
			getline(file,str);
			string field_value=str;
			obj.append(field_name,field_value);
			getline(file,str);
		}
    	conn.insert( db_name , obj.obj() );
	}
	file.close();

}
template <class T>
void query_record(mongo::DBClientConnection &conn, const string &fu_name, const string &field_name, const T &field_value){
	clock_t t1,t2;
	cout<<"Single Record Find"<<endl;
	cout<<"Field_Name :"<<field_name<<endl;
	cout<<"Field_Value:"<<field_value<<endl;
	t1=clock();

	mongo::BSONObjBuilder query;
    query.append( field_name, field_value);
   	std::auto_ptr<mongo::DBClientCursor> cursor = conn.query( fu_name, query.obj() );
    if (!cursor.get()) {
   		cout << "query failure" << endl;
        return ;
    }

	int count=0;
    while ( cursor->more() ) {
    	mongo::BSONObj obj = cursor->next();
		count++;
        //cout << "\t" << obj.jsonString() << endl;
    }
	t2=clock();
	cout<<"Count="<<count<<endl;
	cout<<"Searching Time="<<((float)t2-(float)t1)/CLOCKS_PER_SEC<<endl;

}

int main( int argc, const char **argv ) {

    const char *port = "27017";
    if ( argc != 1 ) {
        if ( argc != 3 ) {
            cout << "need to pass port as second param" << endl;
            return EXIT_FAILURE;
        }
        port = argv[ 2 ];
    }

    mongo::Status status = mongo::client::initialize();
    if ( !status.isOK() ) {
        std::cout << "failed to initialize the client driver: " << status.toString() << endl;
        return EXIT_FAILURE;
    }

    mongo::DBClientConnection conn;
    string errmsg;
    if ( ! conn.connect( string( "127.0.0.1:" ) + port , errmsg ) ) {
        cout << "couldn't connect : " << errmsg << endl;
        return EXIT_FAILURE;
    }

	cout<<"MongoDB Connected"<<endl;

	query_test_1();
	
	query_record(conn,fu_name,field_name,value2);


    return EXIT_SUCCESS;
}
